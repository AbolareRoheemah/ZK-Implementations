{"$message_type":"diagnostic","message":"macro expansion ignores token `{` and any following","code":null,"level":"error","spans":[{"file_name":"src/sparse.rs","byte_start":846,"byte_end":871,"line_start":35,"line_end":35,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    println!(\"{}\", my_degree);","highlight_start":5,"highlight_end":30}],"label":"caused by the macro expansion here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/std/src/macros.rs","byte_start":4400,"byte_end":4401,"line_start":142,"line_end":142,"column_start":23,"column_end":24,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the usage of `println!` is likely invalid in item context","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: macro expansion ignores token `{` and any following\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/std/src/macros.rs:142:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/sparse.rs:35:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"{}\", my_degree);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mcaused by the macro expansion here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the usage of `println!` is likely invalid in item context\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"macro expansion ignores token `{` and any following","code":null,"level":"error","spans":[{"file_name":"src/sparse.rs","byte_start":926,"byte_end":949,"line_start":38,"line_end":38,"column_start":5,"column_end":28,"is_primary":false,"text":[{"text":"    println!(\"{}\", my_eval);","highlight_start":5,"highlight_end":28}],"label":"caused by the macro expansion here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/std/src/macros.rs","byte_start":4400,"byte_end":4401,"line_start":142,"line_end":142,"column_start":23,"column_end":24,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the usage of `println!` is likely invalid in item context","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: macro expansion ignores token `{` and any following\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/std/src/macros.rs:142:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/sparse.rs:38:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"{}\", my_eval);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mcaused by the macro expansion here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the usage of `println!` is likely invalid in item context\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"let bindings cannot shadow constants","code":{"code":"E0530","explanation":"A binding shadowed something it shouldn't.\n\nA match arm or a variable has a name that is already used by\nsomething else, e.g.\n\n* struct name\n* enum variant\n* static\n* associated constant\n\nThis error may also happen when an enum variant *with fields* is used\nin a pattern, but without its fields.\n\n```compile_fail\nenum Enum {\n    WithField(i32)\n}\n\nuse Enum::*;\nmatch WithField(1) {\n    WithField => {} // error: missing (_)\n}\n```\n\nMatch bindings cannot shadow statics:\n\n```compile_fail,E0530\nstatic TEST: i32 = 0;\n\nlet r = 123;\nmatch r {\n    TEST => {} // error: name of a static\n}\n```\n\nFixed examples:\n\n```\nstatic TEST: i32 = 0;\n\nlet r = 123;\nmatch r {\n    some_value => {} // ok!\n}\n```\n\nor\n\n```\nconst TEST: i32 = 0; // const, not static\n\nlet r = 123;\nmatch r {\n    TEST => {} // const is ok!\n    other_values => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"src/sparse.rs","byte_start":293,"byte_end":302,"line_start":14,"line_end":14,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"            let mut my_degree: u32 = 0;","highlight_start":21,"highlight_end":30}],"label":"cannot be named the same as a constant","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/sparse.rs","byte_start":799,"byte_end":841,"line_start":34,"line_end":34,"column_start":5,"column_end":47,"is_primary":false,"text":[{"text":"    const my_degree: u32 = my_struct.degree();","highlight_start":5,"highlight_end":47}],"label":"the constant `my_degree` is defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0530]\u001b[0m\u001b[0m\u001b[1m: let bindings cannot shadow constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:14:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut my_degree: u32 = 0;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot be named the same as a constant\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    const my_degree: u32 = my_struct.degree();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe constant `my_degree` is defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"allocations are not allowed in constants","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\nconst CON : Vec<i32> = vec![1, 2, 3];\n```\n"},"level":"error","spans":[{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1851,"byte_end":1885,"line_start":54,"line_end":54,"column_start":13,"column_end":47,"is_primary":true,"text":[],"label":"allocation not allowed in constants","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/sparse.rs","byte_start":766,"byte_end":786,"line_start":31,"line_end":31,"column_start":15,"column_end":35,"is_primary":false,"text":[{"text":"        coef: vec![(5, 0), (3, 2)]","highlight_start":15,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1447,"byte_end":1463,"line_start":42,"line_end":42,"column_start":1,"column_end":17,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:31:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        coef: vec![(5, 0), (3, 2)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in constants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot call non-const fn `slice::<impl [(u32, u32)]>::into_vec::<std::alloc::Global>` in constants","code":{"code":"E0015","explanation":"A non-`const` function was called in a `const` context.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\n// error: cannot call non-const fn `create_some` in constants\nconst FOO: Option<u8> = create_some();\n```\n\nAll functions used in a `const` context (constant or static expression) must\nbe marked `const`.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\n// declared as a `const` function:\nconst fn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // no error!\n```\n"},"level":"error","spans":[{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1635,"byte_end":1895,"line_start":50,"line_end":55,"column_start":9,"column_end":10,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/sparse.rs","byte_start":766,"byte_end":786,"line_start":31,"line_end":31,"column_start":15,"column_end":35,"is_primary":false,"text":[{"text":"        coef: vec![(5, 0), (3, 2)]","highlight_start":15,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1447,"byte_end":1463,"line_start":42,"line_end":42,"column_start":1,"column_end":17,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: cannot call non-const fn `slice::<impl [(u32, u32)]>::into_vec::<std::alloc::Global>` in constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:31:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        coef: vec![(5, 0), (3, 2)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot call non-const fn `Univariatepoly::degree` in constants","code":{"code":"E0015","explanation":"A non-`const` function was called in a `const` context.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\n// error: cannot call non-const fn `create_some` in constants\nconst FOO: Option<u8> = create_some();\n```\n\nAll functions used in a `const` context (constant or static expression) must\nbe marked `const`.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\n// declared as a `const` function:\nconst fn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // no error!\n```\n"},"level":"error","spans":[{"file_name":"src/sparse.rs","byte_start":832,"byte_end":840,"line_start":34,"line_end":34,"column_start":38,"column_end":46,"is_primary":true,"text":[{"text":"    const my_degree: u32 = my_struct.degree();","highlight_start":38,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: cannot call non-const fn `Univariatepoly::degree` in constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:34:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    const my_degree: u32 = my_struct.degree();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"destructor of `Univariatepoly` cannot be evaluated at compile-time","code":{"code":"E0493","explanation":"A value with a custom `Drop` implementation may be dropped during const-eval.\n\nErroneous code example:\n\n```compile_fail,E0493\nenum DropType {\n    A,\n}\n\nimpl Drop for DropType {\n    fn drop(&mut self) {}\n}\n\nstruct Foo {\n    field1: DropType,\n}\n\nstatic FOO: Foo = Foo { field1: (DropType::A, DropType::A).1 }; // error!\n```\n\nThe problem here is that if the given type or one of its fields implements the\n`Drop` trait, this `Drop` implementation cannot be called within a const\ncontext since it may run arbitrary, non-const-checked code. To prevent this\nissue, ensure all values with a custom `Drop` implementation escape the\ninitializer.\n\n```\nenum DropType {\n    A,\n}\n\nimpl Drop for DropType {\n    fn drop(&mut self) {}\n}\n\nstruct Foo {\n    field1: DropType,\n}\n\nstatic FOO: Foo = Foo { field1: DropType::A }; // We initialize all fields\n                                               // by hand.\n```\n"},"level":"error","spans":[{"file_name":"src/sparse.rs","byte_start":822,"byte_end":831,"line_start":34,"line_end":34,"column_start":28,"column_end":37,"is_primary":true,"text":[{"text":"    const my_degree: u32 = my_struct.degree();","highlight_start":28,"highlight_end":37}],"label":"the destructor for this type cannot be evaluated in constants","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/sparse.rs","byte_start":839,"byte_end":840,"line_start":34,"line_end":34,"column_start":45,"column_end":46,"is_primary":false,"text":[{"text":"    const my_degree: u32 = my_struct.degree();","highlight_start":45,"highlight_end":46}],"label":"value is dropped here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0493]\u001b[0m\u001b[0m\u001b[1m: destructor of `Univariatepoly` cannot be evaluated at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:34:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    const my_degree: u32 = my_struct.degree();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue is dropped here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe destructor for this type cannot be evaluated in constants\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot call non-const fn `Univariatepoly::evaluate` in constants","code":{"code":"E0015","explanation":"A non-`const` function was called in a `const` context.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\n// error: cannot call non-const fn `create_some` in constants\nconst FOO: Option<u8> = create_some();\n```\n\nAll functions used in a `const` context (constant or static expression) must\nbe marked `const`.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\n// declared as a `const` function:\nconst fn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // no error!\n```\n"},"level":"error","spans":[{"file_name":"src/sparse.rs","byte_start":909,"byte_end":920,"line_start":37,"line_end":37,"column_start":36,"column_end":47,"is_primary":true,"text":[{"text":"    const my_eval: u32 = my_struct.evaluate(1);","highlight_start":36,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: cannot call non-const fn `Univariatepoly::evaluate` in constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:37:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    const my_eval: u32 = my_struct.evaluate(1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"destructor of `Univariatepoly` cannot be evaluated at compile-time","code":{"code":"E0493","explanation":"A value with a custom `Drop` implementation may be dropped during const-eval.\n\nErroneous code example:\n\n```compile_fail,E0493\nenum DropType {\n    A,\n}\n\nimpl Drop for DropType {\n    fn drop(&mut self) {}\n}\n\nstruct Foo {\n    field1: DropType,\n}\n\nstatic FOO: Foo = Foo { field1: (DropType::A, DropType::A).1 }; // error!\n```\n\nThe problem here is that if the given type or one of its fields implements the\n`Drop` trait, this `Drop` implementation cannot be called within a const\ncontext since it may run arbitrary, non-const-checked code. To prevent this\nissue, ensure all values with a custom `Drop` implementation escape the\ninitializer.\n\n```\nenum DropType {\n    A,\n}\n\nimpl Drop for DropType {\n    fn drop(&mut self) {}\n}\n\nstruct Foo {\n    field1: DropType,\n}\n\nstatic FOO: Foo = Foo { field1: DropType::A }; // We initialize all fields\n                                               // by hand.\n```\n"},"level":"error","spans":[{"file_name":"src/sparse.rs","byte_start":899,"byte_end":908,"line_start":37,"line_end":37,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"    const my_eval: u32 = my_struct.evaluate(1);","highlight_start":26,"highlight_end":35}],"label":"the destructor for this type cannot be evaluated in constants","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/sparse.rs","byte_start":919,"byte_end":920,"line_start":37,"line_end":37,"column_start":46,"column_end":47,"is_primary":false,"text":[{"text":"    const my_eval: u32 = my_struct.evaluate(1);","highlight_start":46,"highlight_end":47}],"label":"value is dropped here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0493]\u001b[0m\u001b[0m\u001b[1m: destructor of `Univariatepoly` cannot be evaluated at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:37:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    const my_eval: u32 = my_struct.evaluate(1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue is dropped here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe destructor for this type cannot be evaluated in constants\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"allocations are not allowed in constants","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\nconst CON : Vec<i32> = vec![1, 2, 3];\n```\n"},"level":"error","spans":[{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1851,"byte_end":1885,"line_start":54,"line_end":54,"column_start":13,"column_end":47,"is_primary":true,"text":[],"label":"allocation not allowed in constants","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/sparse.rs","byte_start":1081,"byte_end":1101,"line_start":46,"line_end":46,"column_start":15,"column_end":35,"is_primary":false,"text":[{"text":"        coef: vec![(5, 0), (3, 2)]","highlight_start":15,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1447,"byte_end":1463,"line_start":42,"line_end":42,"column_start":1,"column_end":17,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:46:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        coef: vec![(5, 0), (3, 2)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in constants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot call non-const fn `slice::<impl [(u32, u32)]>::into_vec::<std::alloc::Global>` in constants","code":{"code":"E0015","explanation":"A non-`const` function was called in a `const` context.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\n// error: cannot call non-const fn `create_some` in constants\nconst FOO: Option<u8> = create_some();\n```\n\nAll functions used in a `const` context (constant or static expression) must\nbe marked `const`.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\n// declared as a `const` function:\nconst fn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // no error!\n```\n"},"level":"error","spans":[{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1635,"byte_end":1895,"line_start":50,"line_end":55,"column_start":9,"column_end":10,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/sparse.rs","byte_start":1081,"byte_end":1101,"line_start":46,"line_end":46,"column_start":15,"column_end":35,"is_primary":false,"text":[{"text":"        coef: vec![(5, 0), (3, 2)]","highlight_start":15,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1447,"byte_end":1463,"line_start":42,"line_end":42,"column_start":1,"column_end":17,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: cannot call non-const fn `slice::<impl [(u32, u32)]>::into_vec::<std::alloc::Global>` in constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:46:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        coef: vec![(5, 0), (3, 2)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"allocations are not allowed in constants","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\nconst CON : Vec<i32> = vec![1, 2, 3];\n```\n"},"level":"error","spans":[{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1851,"byte_end":1885,"line_start":54,"line_end":54,"column_start":13,"column_end":47,"is_primary":true,"text":[],"label":"allocation not allowed in constants","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/sparse.rs","byte_start":1177,"byte_end":1205,"line_start":49,"line_end":49,"column_start":15,"column_end":43,"is_primary":false,"text":[{"text":"        coef: vec![(1, 0), (2, 1), (3, 2)]","highlight_start":15,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1447,"byte_end":1463,"line_start":42,"line_end":42,"column_start":1,"column_end":17,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:49:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        coef: vec![(1, 0), (2, 1), (3, 2)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in constants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot call non-const fn `slice::<impl [(u32, u32)]>::into_vec::<std::alloc::Global>` in constants","code":{"code":"E0015","explanation":"A non-`const` function was called in a `const` context.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\n// error: cannot call non-const fn `create_some` in constants\nconst FOO: Option<u8> = create_some();\n```\n\nAll functions used in a `const` context (constant or static expression) must\nbe marked `const`.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\n// declared as a `const` function:\nconst fn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // no error!\n```\n"},"level":"error","spans":[{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1635,"byte_end":1895,"line_start":50,"line_end":55,"column_start":9,"column_end":10,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/sparse.rs","byte_start":1177,"byte_end":1205,"line_start":49,"line_end":49,"column_start":15,"column_end":43,"is_primary":false,"text":[{"text":"        coef: vec![(1, 0), (2, 1), (3, 2)]","highlight_start":15,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/alloc/src/macros.rs","byte_start":1447,"byte_end":1463,"line_start":42,"line_end":42,"column_start":1,"column_end":17,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: cannot call non-const fn `slice::<impl [(u32, u32)]>::into_vec::<std::alloc::Global>` in constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sparse.rs:49:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        coef: vec![(1, 0), (2, 1), (3, 2)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 13 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 13 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0010, E0015, E0493, E0530.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0010, E0015, E0493, E0530.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0010`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0010`.\u001b[0m\n"}
